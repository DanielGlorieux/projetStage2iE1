/**
 * Script de test pour v√©rifier les statistiques du Dashboard
 * 
 * Usage: node test-dashboard-stats.js <token>
 * Le token doit √™tre celui d'un superviseur ou membre de l'√©quipe LED
 */

const http = require('http');

const token = process.argv[2];

if (!token) {
  console.error('‚ùå Erreur: Token d\'authentification requis');
  console.log('Usage: node test-dashboard-stats.js <token>');
  console.log('\nPour obtenir un token:');
  console.log('1. Connectez-vous sur l\'application web');
  console.log('2. Ouvrez la console du navigateur (F12)');
  console.log('3. Tapez: localStorage.getItem("token")');
  console.log('4. Copiez le token affich√©');
  process.exit(1);
}

console.log('üß™ Test des statistiques du Dashboard...\n');

const options = {
  hostname: 'localhost',
  port: 5000,
  path: '/api/search/stats',
  method: 'GET',
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  }
};

const req = http.request(options, (res) => {
  console.log(`üì° Statut HTTP: ${res.statusCode}\n`);

  let data = '';
  
  res.on('data', (chunk) => {
    data += chunk;
  });

  res.on('end', () => {
    try {
      const result = JSON.parse(data);
      
      if (result.success) {
        console.log('‚úÖ Statistiques r√©cup√©r√©es avec succ√®s!\n');
        
        const stats = result.data;
        
        console.log('üìä STATISTIQUES √âTUDIANTS:');
        console.log(`   Total √©tudiants: ${stats.totalStudents}`);
        console.log(`   √âtudiants actifs: ${stats.studentsWithActivities}`);
        console.log(`   Taux d'activit√©: ${stats.activeStudentsRate}%\n`);
        
        console.log('üìù STATISTIQUES ACTIVIT√âS:');
        console.log(`   Total activit√©s: ${stats.totalActivities}`);
        console.log('\n   Par statut:');
        Object.entries(stats.activitiesByStatus || {}).forEach(([status, count]) => {
          console.log(`     - ${status}: ${count}`);
        });
        console.log('\n   Par type:');
        Object.entries(stats.activitiesByType || {}).forEach(([type, count]) => {
          console.log(`     - ${type}: ${count}`);
        });
        
        console.log('\nüéØ SCORES MOYENS:');
        console.log(`   Entrepreneuriat: ${stats.averageScores?.entrepreneuriat || 0}/100`);
        console.log(`   Leadership: ${stats.averageScores?.leadership || 0}/100`);
        console.log(`   Digital: ${stats.averageScores?.digital || 0}/100`);
        console.log(`   Score global: ${stats.globalAverageScore || 0}/100\n`);
        
        console.log('üïí ACTIVIT√âS R√âCENTES:');
        if (stats.recentActivities && stats.recentActivities.length > 0) {
          stats.recentActivities.slice(0, 5).forEach((activity, index) => {
            console.log(`   ${index + 1}. ${activity.title}`);
            console.log(`      Type: ${activity.type} | Statut: ${activity.status}`);
            console.log(`      Par: ${activity.user} | Date: ${new Date(activity.createdAt).toLocaleDateString('fr-FR')}`);
          });
        } else {
          console.log('   Aucune activit√© r√©cente');
        }
        
        console.log('\nüí° ANALYSE:');
        
        if (stats.totalStudents === 0) {
          console.log('   ‚ö†Ô∏è  Aucun √©tudiant dans la base de donn√©es');
        }
        
        if (stats.totalActivities === 0) {
          console.log('   ‚ö†Ô∏è  Aucune activit√© dans la base de donn√©es');
        }
        
        if (stats.totalActivities > 0 && stats.globalAverageScore === 0) {
          console.log('   ‚ö†Ô∏è  Aucune activit√© n\'a encore √©t√© √©valu√©e');
          console.log('       Les scores seront √† 0 tant qu\'il n\'y a pas d\'√©valuations');
        }
        
        if (stats.totalStudents > 0 && stats.studentsWithActivities === 0) {
          console.log('   ‚ö†Ô∏è  Aucun √©tudiant n\'a cr√©√© d\'activit√©');
        }
        
        if (stats.totalActivities > 0 && stats.globalAverageScore > 0) {
          console.log('   ‚úÖ Les donn√©es semblent coh√©rentes!');
          console.log('   ‚úÖ Le Dashboard devrait afficher les bonnes statistiques');
        }
        
      } else {
        console.error('‚ùå Erreur dans la r√©ponse:');
        console.error(result.error || 'Erreur inconnue');
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors du parsing JSON:');
      console.error(data);
    }
  });
});

req.on('error', (e) => {
  console.error(`‚ùå Erreur de connexion: ${e.message}`);
  console.error('V√©rifiez que le serveur backend est d√©marr√© sur le port 5000');
});

req.end();
